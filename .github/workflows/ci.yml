name: CI - Build, Test & Push Image
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write
  security-events: write

jobs:
  # Job 1: Code Quality & Security Checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Security scan with bandit
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt

      - name: Check for hardcoded secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Dependency vulnerability scan
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Run tests
        run: |
          pytest --cov=src --cov-report=xml --cov-report=html

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            bandit-report.json
            safety-report.json
            coverage.xml
            htmlcov/

  # Job 2: Build & Security Scan
  build-and-scan:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/agrarian-application-repository/temperature-collector-app:sha-${{ github.sha }}
            ghcr.io/agrarian-application-repository/temperature-collector-app:latest

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/agrarian-application-repository/temperature-collector-app:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate SBOM with Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          syft ghcr.io/agrarian-application-repository/temperature-collector-app:latest -o spdx-json > sbom.spdx.json
          echo "SBOM generated successfully"
          ls -la sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  # Job 3: Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: build-and-scan
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Docker image locally
        run: |
          docker pull ghcr.io/agrarian-application-repository/temperature-collector-app:latest
          docker run -d --name test-app -p 8080:80 ghcr.io/agrarian-application-repository/temperature-collector-app:latest
          sleep 10
          curl -f http://localhost:8080/health || exit 1
          curl -f http://localhost:8080/ || exit 1
          docker stop test-app
          docker rm test-app

      - name: Test multi-arch images
        run: |
          docker run --rm ghcr.io/agrarian-application-repository/temperature-collector-app:latest python --version
